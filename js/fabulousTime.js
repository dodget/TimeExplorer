/**
 * Makes an associative array based on the keys and values provided
 * @param {array} keys - Array of keys for output array
 * @param {array} values - Array of values for output array
 */
function zip_arrays(keys, values) {
  var returnValues = {};
  values.forEach(function(val, i) {
    returnValues[keys[i]] = val;
  });
  return returnValues
}

/**
 * Class loading data from one or more Google Sheets formatted for use in Knight
 * Lab's Timeline JS. Prepares data for use in visjs timeline. Uses jquery.
 * Data is loaded asynchronously, so should be loaded in FabulousTime.promise.done()
 * function. Start and end dates are loaded, other properties are stored as item
 * properties to be loaded by templates or as part of the item dataset object.
 */
class FabulousTime {
  /**
   * Load data from Google Sheets by sheet IDs
   * @param {array} sheet_ids - Array with Google Sheet ids as strings. If
   * sheet_ids is a string, it is assumed to be a single sheet ID
   * @param {string} api_key - Google Sheets API key.
   */
  constructor(sheet_ids, api_key) {
    if (typeof(sheet_ids) == 'string') {
      this.sheet_ids = [sheet_ids];
    } else {
      this.sheet_ids = sheet_ids;
    }
    this.api_key = api_key;
    this.sheet_data = [];

    this.promise = this.get_all_sheet_data();

    self = this;
    this.promise.done(function() {
      self.items = self.set_items(self, self.sheet_data);
    });
  }

  /**
   * Gets data from the spreadsheet with the given ID
   * Returns an array of rows as associative arrays keyed by column name
   * @param {string} sheet_id - ID of Google spreadsheet containing data
   */
  get_sheet_data(sheet_id) {
    var self = this;
    var dfd = $.Deferred();
    $.getJSON("https://sheets.googleapis.com/v4/spreadsheets/"+sheet_id+"/values/A:ZZZ?key="+this.api_key).done(function(data) {
      var columns = data.values[0];
      for (var i = 1; i < data.values.length; i++) {
        var values = zip_arrays(columns, data.values[i]);
        self.sheet_data.push(values);
      };
      dfd.resolve();
    });
    return dfd.promise();
  };

  /**
   * Gets data from multiple spreadsheets, returns it all in the same array.
   * Built for data where there is consistency in column naming
   * Resulting array will contain associative arrays keyed by their sheet's
   * column names, so having column names that differ may break the use of
   * output.
   * @param {array} sheet_ids - Array of sheet IDs from which data is to be extracted
   * @uses get_sheet_data
   */
  get_all_sheet_data() {
    var self = this;
    var promises = [];
    for (var i = 0; i < this.sheet_ids.length; i++) {
      var sheet_id = this.sheet_ids[i];
      promises.push(this.get_sheet_data(sheet_id));
    };
    return $.when.apply($,promises);
  };

  /**
   * Constructs a date, given year, month, day, or time may be null.
   * Returns a date object or null, if all inputs are null.
   * @param {integer} year  - year for date constructor
   * @param {integer} month - month for date constructor
   * @param {integer} day   - day for date constructor
   * @param {integer} time  - time for date constructor
   */
  dateWithNulls(year,month,day,time){
    var date = new Date([1,'01','01','00:00'])
    if (year  && year.trim())  { date.setYear(year) }
    if (month && month.trim()) { date.setMonth(month); }
    if (day   && day.trim())   { date.setDate(day); }
    if (time  && time.trim())  { date.setTime(time); }
    if (date.getTime() != new Date([1,'01','01','00:00']).getTime()) {
      // If the date has changed from the initial value, return it
      return date;
    } else {
      // Otherwise return null
      return null;
    }
  }

  /**
   * Gets date/time information from datum by column names.
   * @uses dateWithNulls
   * @param {array} datum - Associative array of row as generated by get_sheet_data
   * @param {string} year_column  - Key for year data in datum
   * @param {string} month_column - Key for month data in datum
   * @param {string} day_column   - Key for day data in datum
   * @param {string} time_column  - Key for time data in datum
   * @param {function} callback - Function to construct the datetime object
   */
  get_datetime(datum,year_column,month_column,day_column,time_column,callback) {
    var year  = datum[year_column];
    var month = datum[month_column];
    var day   = datum[day_column];
    var time  = datum[time_column];
    var output = callback(year,month,day,time);
    return output;
  };

  /**
   * Used to set the `items` property of the class.
   * @param {object} self - The "this" to which the items should be set.
   * @param {array} sheet_data - Array of data from sheets to be made into items.
   */
  set_items(self, sheet_data) {
    var items = [];
    for (var i = 0; i < sheet_data.length; i++) {
      var item = {};
      item['start'] = self.get_datetime(sheet_data[i],'Year','Month','Day','Time',self.dateWithNulls);
      item['end']   = self.get_datetime(sheet_data[i],'End Year','End Month','End Day','End Time',self.dateWithNulls);
      item['display_date']    = sheet_data[i]['Display Date']
      item['headline']        = sheet_data[i]['Headline'];
      item['text']            = sheet_data[i]['Text'];
      item['media']           = sheet_data[i]['Media'];
      item['media_credit']    = sheet_data[i]['Media Credit'];
      item['media_caption']   = sheet_data[i]['Media Caption'];
      item['media_thumbnail'] = sheet_data[i]['Media Thumbnail'];
      item['sheet_type']      = sheet_data[i]['Type'];
      item['sheet_group']     = sheet_data[i]['Group'];
      if (item['start']) { items.push(item); }
    }
    return items;
  }
}
